<tool id="fastk" name="FastK" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="20.01">
    <description>A k-mer counter for high-quality assembly datasets.</description>
    <macros>
        <token name="@TOOL_VERSION@">1.0.0</token>
        <token name="@VERSION_SUFFIX@">0</token>
        <xml name="citations">
            <citations>
                <citation type="bibtex">                                                                   
                    @misc{github,                                                                 
                    author = {Gene Meyers},
                    year = {2020},                                                                 
                    title = {FastK},                                                        
                    publisher = {GitHub},
                    journal = {GitHub repository},                                               
                    url = {https://github.com/thegenemyers/FASTK},                        
                    }                                                                    
                </citation>
            </citations>
        </xml>
    </macros>    
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">fastk</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        mkdir -p outfiles/tmpfiles && 
        #if $infile.ext == "fasta":
            ln -s '$infile' ./input.fasta &&
            #set INPUTFILE="input.fasta"
        #elif $infile.ext == "fasta.gz":
            ln -s '$infile' ./input.fasta.gz &&
            #set INPUTFILE="input.fasta.gz"
        #elif $infile.ext == "fastq":
            ln -s '$infile' ./input.fastq &&
            #set INPUTFILE="input.fastq"
        #elif $infile.ext == "fastq.gz":
            ln -s '$infile' ./input.fastq.gz &&
            #set INPUTFILE="input.fastq.gz"
        #elif $infile.ext == "cram":
            ln -s '$infile' ./input.cram &&
            #set INPUTFILE="input.cram"
        #elif $infile.ext == "bam":
            ln -s '$infile' ./input.bam &&
            #set INPUTFILE="input.bam"
        #elif $infile.ext == "sam":
            ln -s '$infile' ./input.sam &&
            #set INPUTFILE="input.sam"
        #end if 
        FastK $INPUTFILE 
        #set kmer_size=$kmer_size
        -k$kmer_size 
        #if $sorted_table.sorted_table_presence == 'yes':
            #if $sorted_table.type_sorted_table.sorted_table_options == 'default_sorted_table':
                -t 
            #elif $sorted_table.type_sorted_table.sorted_table_options == 'cutoff_sorted_table':
                #set sorted_table_cutoff=$sorted_table.type_sorted_table.sorted_table_cutoff
                -t$sorted_table_cutoff 
            #end if
        #end if
        -T\${GALAXY_SLOTS:-1} -Noutfiles/output -Poutfiles/tmpfiles
        #if $sorted_table.sorted_table_presence == 'yes':
            && Tabex outfiles/output.ktab -t${sorted_table.advanced.tabex_threshold} LIST > tabex.txt
        #end if
        && tar -c -f fastk.tar ./outfiles/
    ]]></command>
    <inputs>
        <param name="infile" type="data" format="fasta,fasta.gz,fastq,fastq.gz,cram,bam,sam" label="Input file" />
        <param name="kmer_size" type="integer" min="5" max="50" value="40" label="K-mer size" help="Default k-mer size is 40." />
        <conditional name="sorted_table">
            <param name="sorted_table_presence" type="select" label="Sorted table selection" help="Do you want a sorted table of all canonical k-mers and their counts?">
                <option value="no">No</option>
                <option value="yes">Yes</option>
            </param>
            <when value="no"/>
            <when value="yes">
                <conditional name="type_sorted_table">
                    <param name="sorted_table_options" type="select" label="Sorted table presence" help="Do you want to specify a cut-off?">
                        <option value="default_sorted_table">default (1)</option>
                        <option value="cutoff_sorted_table">specify cutoff</option>
                    </param>
                    <when value="default_sorted_table"/>
                    <when value="cutoff_sorted_table">
                        <param name="sorted_table_cutoff" type="integer" min="2" value="10" label="Sorted table cutoff value"/>
                    </when>
                </conditional>
                <section title="Advanced" name="advanced">
                    <param name="tabex_threshold" label="Tabex count threshold" type="integer" value="5" min="1"/>
                </section>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="fastk_out" format="tar" from_work_dir="fastk.tar" label="${tool.name} on ${on_string}: FastK hist files"/>
        <data name="tabex_hist" format="txt" from_work_dir="tabex.txt" label="${tool.name} on ${on_string}: Tabex output">
            <filter>sorted_table['sorted_table_presence'] == "yes"</filter>
        </data>
    </outputs>
    <tests>
    <!-- TEST 1 -->
        <test expect_num_outputs="1">
            <param name="infile" value="input01.fasta.gz"/>
            <output name="fastk_out" ftype="tar">
                <assert_contents>
                    <has_size value="266240" delta="1000" />
                </assert_contents>
            </output>
        </test>
        <!-- TEST 2 -->
        <test expect_num_outputs="2">
            <param name="infile" value="input01.fasta.gz"/>
            <conditional name="sorted_table">
                <param name="sorted_table_presence" value="yes"/>
                <conditional name="type_sorted_table">
                    <param name="sorted_table_options" value="default_sorted_table"/>
                </conditional>
            </conditional>
            <output name="fastk_out" ftype="tar">
                <assert_contents>
                    <has_size value="5826560" delta="1000" />
                </assert_contents>
            </output>
            <output name="tabex_hist" value="test02.tabex.txt"/>
        </test>
        <!-- TEST 3 -->
        <test expect_num_outputs="2">
            <param name="infile" value="input01.fasta.gz"/>
            <conditional name="sorted_table">
                <param name="sorted_table_presence" value="yes"/>
                <conditional name="type_sorted_table">
                    <param name="sorted_table_options" value="cutoff_sorted_table"/>
                    <param name="sorted_table_cutoff" value="5"/>
                </conditional>
            </conditional>
            <output name="fastk_out" ftype="tar">
                <assert_contents>
                    <has_size value="276480" delta="1000" />
                </assert_contents>
            </output>
            <output name="tabex_hist" value="test03.tabex.txt"/>
        </test>       
    </tests>
    <help><![CDATA[
        FastK is a kâ€‘mer counter that is optimized for processing high quality DNA assembly data sets such as those produced with an Illumina instrument or a PacBio run in HiFi mode.
    ]]></help>
    <expand macro="citations" />
</tool>

